NOTE: WIP

License : CC BY-SA 3.0 http://creativecommons.org/licenses/by-sa/3.0/

RC3200 (RISC CPU 1600) Specification
Version 0.1 

=== SUMMARY ====================================================================

 * 32 bit RISC CPU
 * 32 general purpose registers (R0 to R31)
 * Multiplication register Y
 * Base Pointer (BP = R30) and Stack Pointer (SP = R31) 
 * Flags Register (FLAGS)
 * Interrupt Address (IA)
 * IO address space of 8 bit
 * Little Endian

In this document, anything within [brackets] is shorthand for 
"the value of the RAM at the location of the value inside the brackets". 
For example, SP registers "stack pointer", but [SP] means the value of the RAM 
at the location the stack pointer is pointing. Also in the notation we will use
BYTES for 8 bit values, WORDS for 16 bit values and DWORDs for 32 bit values. 

The RC3200 instruction set is based in 32 bit dwords, so each time that the PC 
is incremented, is incremented by four. Also is Little Endian, so the MSB of a 
word or dword is stored in the lowest address, and the LSB is stored in the 
highest address.

Whenever the CPU needs to read a instruction, it reads [PC], then increases PC
by four as a instruction uses dword. Shorthand for this is [PC+4]. In some 
cases, the CPU will modify a value before reading it, in this case the 
shorthand is [++X]. When we say that the RC3200 Push a value to the Stack, 
writes these value at [--SP]. When we say that RC3200 Pops a value from the 
stack, reads a value from [SP++]. Remember that we work with 32 bit values in
Little Endian, so to store a value in the stack, we need to push each byte of 
the dword value.

Also the internal architecture is a not pipelined 4 stages (FETCH, DECODE,
EXECUTE, RAM WRITE/READ), So the majority of instructions need only 3 cycles 
to be fully executed, with the exception of multiplication/division/modulus
instructions, that halts the EXECUTE stage using the internal ALU to implement,
and the RAM and IO instructions that uses the fourth stage.


 Registers :
  - R0 .. R31 - General Purpose Registers (GPR)
  - R30 - BP - Base Pointer   
  - R31 - SP - Stack Pointer -> Points to the last value Pushed in the stack
  - FLAGS register
  - Y - Multiplication/Division register
  - IA - Interrupt Address
  - PC - Program Counter  

FLAGS register :
  BIT 31-11-> Reserved
  BIT 10   -> ENABLE DIVISION ERRORS (TDE)
  BIT 9    -> ENABLE OVERFLOW ERRORS  (TOE)
  BIT 8    -> ENABLE SINGLE-STEP MODE (TSS)
  BIT 4-7  -> Reserved
  BIT 3    -> INTERRUPT FLAG: 1 If an interrupt is happening. (IF)
  BIT 2    -> DIVISION ERROR FLAG: 1 If was a division error. (DE)
  BIT 1    -> OVERFLOW FLAG: 1 If an arithmetic operation overflowed. (OF)
  BIT 0    -> CARRY FLAG: 1 If the last ADDx/SUBx carried or borrowed a bit. (CF)

If TOE bit is enabled, the RC3200  will generated an appropriated interrupt if an 
overflow happens. 
If TDE bit is enabled, the RC3200  will generated an appropriated interrupt if an 
division error happens.
If TSS bit is enable, the RC3200  will generate an appropriated interrupt with 
message 1
The Carry flag is gets his value, doing a XOR of the carry bit and the sign bit 
of the result, when an arithmetic operation happens.

=== BOOT/RESET STATUS ==========================================================

All registers are set to 0 when the RC3200 boot-up or does a reset.


=== INSTRUCTIONS FORMAT ========================================================


Instructions with 3 parameters :

31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------------------------------------------------------
 1  1 x  x  x  x  x  x  x  x  x  x  x  x  x  x  M  r1 r1 r1 r1 r1 r2 r2 r2 r2 r2 r3 r3 r3 r3 r3

M bit marks if r2 is a 5 bit literal or a register. 5 bit Literals are defined 
from 15 to -14. -15 Literal (1001) is reserved to mark that the next word is a 
32 bit Long Literal value. Access to the next  word for a Long Literals takes a
extra clock cycle

Instruction     Parameters                      Format              Cycle Count
-------------------------------------------------------------------------------
LOAD     REG1 + REG2, REG3           11 00000000000000 0 RRRRR RRRRR RRRRR    4
LOAD     REG1 + LITERAL, REG3        11 00000000000000 1 RRRRR LLLLL RRRRR    5
LOAD.W   REG1 + REG2, REG3           11 00000000000001 0 RRRRR RRRRR RRRRR    4
LOAD.W   REG1 + LITERAL, REG3        11 00000000000001 1 RRRRR LLLLL RRRRR    5
LOAD.B   REG1 + REG2, REG3           11 00000000000010 0 RRRRR RRRRR RRRRR    4
LOAD.B   REG1 + LITERAL, REG3        11 00000000000010 1 RRRRR LLLLL RRRRR    5

STORE    REG1 + REG2, REG3           11 00000000000011 0 RRRRR RRRRR RRRRR    4
STORE    REG1 + LITERAL, REG3        11 00000000000011 1 RRRRR LLLLL RRRRR    5
STORE.W  REG1 + REG2, REG3           11 00000000000100 0 RRRRR RRRRR RRRRR    4
STORE.W  REG1 + LITERAL, REG3        11 00000000000100 1 RRRRR LLLLL RRRRR    5
STORE.B  REG1 + REG2, REG3           11 00000000000101 0 RRRRR RRRRR RRRRR    4
STORE.B  REG1 + LITERAL, REG3        11 00000000000101 1 RRRRR LLLLL RRRRR    5


ADD      REG1 op REG2 -> REG3        11 00000000001000 0 RRRRR RRRRR RRRRR    3
ADD      REG1 op LITERAL -> REG3     11 00000000001000 1 RRRRR LLLLL RRRRR    4
SUB      REG1 op REG2 -> REG3        11 00000000001001 0 RRRRR RRRRR RRRRR    3
SUB      REG1 op LITERAL -> REG3     11 00000000001001 1 RRRRR LLLLL RRRRR    4
ADDC     REG1 op REG2 -> REG3        11 00000000001010 0 RRRRR RRRRR RRRRR    3
ADDC     REG1 op LITERAL -> REG3     11 00000000001010 1 RRRRR LLLLL RRRRR    4
SUBB     REG1 op REG2 -> REG3        11 00000000001011 0 RRRRR RRRRR RRRRR    3
SUBB     REG1 op LITERAL -> REG3     11 00000000001011 1 RRRRR LLLLL RRRRR    4

AND      REG1 op REG2 -> REG3        11 00000000001100 0 RRRRR RRRRR RRRRR    3
AND      REG1 op LITERAL -> REG3     11 00000000001100 1 RRRRR LLLLL RRRRR    4
OR       REG1 op REG2 -> REG3        11 00000000001101 0 RRRRR RRRRR RRRRR    3
OR       REG1 op LITERAL -> REG3     11 00000000001101 1 RRRRR LLLLL RRRRR    4
XOR      REG1 op REG2 -> REG3        11 00000000001110 0 RRRRR RRRRR RRRRR    3
XOR      REG1 op LITERAL -> REG3     11 00000000001110 1 RRRRR LLLLL RRRRR    4
NAND     REG1 op REG2 -> REG3        11 00000000001111 0 RRRRR RRRRR RRRRR    3
NAND     REG1 op LITERAL -> REG3     11 00000000001111 1 RRRRR LLLLL RRRRR    4

SLL      REG1 op LITERAL -> REG3     11 00000000010000 0 RRRRR LLLLL RRRRR    3
SLL      REG1 op LITERAL -> REG3     11 00000000010000 1 RRRRR LLLLL RRRRR    4
SRL      REG1 op LITERAL -> REG3     11 00000000010001 0 RRRRR LLLLL RRRRR    3
SRL      REG1 op LITERAL -> REG3     11 00000000010001 1 RRRRR LLLLL RRRRR    4
SRA      REG1 op LITERAL -> REG3     11 00000000010010 0 RRRRR LLLLL RRRRR    3
SRA      REG1 op LITERAL -> REG3     11 00000000010010 1 RRRRR LLLLL RRRRR    4

ROTL     REG1 op LITERAL -> REG3     11 00000000010011 0 RRRRR LLLLL RRRRR    3
ROTL     REG1 op LITERAL -> REG3     11 00000000010011 1 RRRRR LLLLL RRRRR    4
ROTR     REG1 op LITERAL -> REG3     11 00000000010100 0 RRRRR LLLLL RRRRR    3
ROTR     REG1 op LITERAL -> REG3     11 00000000010100 1 RRRRR LLLLL RRRRR    4

UMUL     REG1 op LITERAL -> REG3     11 00000000010101 0 RRRRR LLLLL RRRRR   30
UMUL     REG1 op LITERAL -> REG3     11 00000000010101 1 RRRRR LLLLL RRRRR   31
UDIV     REG1 op LITERAL -> REG3     11 00000000010110 0 RRRRR LLLLL RRRRR   40
UDIV     REG1 op LITERAL -> REG3     11 00000000010110 1 RRRRR LLLLL RRRRR   41
UMOD     REG1 op LITERAL -> REG3     11 00000000010111 0 RRRRR LLLLL RRRRR   40
UMOD     REG1 op LITERAL -> REG3     11 00000000010111 1 RRRRR LLLLL RRRRR   41

MUL      REG1 op LITERAL -> REG3     11 00000000011000 0 RRRRR LLLLL RRRRR   40
MUL      REG1 op LITERAL -> REG3     11 00000000011001 1 RRRRR LLLLL RRRRR   41
DIV      REG1 op LITERAL -> REG3     11 00000000011010 0 RRRRR LLLLL RRRRR   50
DIV      REG1 op LITERAL -> REG3     11 00000000011011 1 RRRRR LLLLL RRRRR   51
MOD      REG1 op LITERAL -> REG3     11 00000000011100 0 RRRRR LLLLL RRRRR   50
MOD      REG1 op LITERAL -> REG3     11 00000000011101 1 RRRRR LLLLL RRRRR   51

Instructions with 2 parameters :

31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------------------------------------------------------
 1  0 x  x  x  x  x  x  x  x  x  x  x  x  x  x  M  l  l  l  l  l  r2 r2 r2 r2 r2 r3 r3 r3 r3 r3

M bit marks if l+r2 is a 10 bit literal or r2 is a register. 10 bit Literals 
are defined from 511 to -510. -511 Literal (1000000001) is reserved to mark 
that the next word is a 32 bit Long Literal value. Access to the next word for 
a Long Literals takes a extra clock cycle.
Note: x means "Don't care"

Instruction     Parameters                      Format              Cycle Count
-------------------------------------------------------------------------------
CPY      REG2, REG3                 10 00000000000000 0 xxxxx RRRRR RRRRR    3
SET      LITERAL, REG3              10 00000000000000 1 LLLLLLLLLL  RRRRR    4

SWP      REG2, REG3                 10 00000000000001 0 xxxxx RRRRR RRRRR    3


BEQ      REG2 op REG3               10 00000000001000 0 xxxxx RRRRR RRRRR    3
BEQ      LITERAL op REG3            10 00000000001000 1 LLLLLLLLLL  RRRRR    4
BNEQ     REG2 op REG3               10 00000000001001 0 xxxxx RRRRR RRRRR    3
BNEQ     LITERAL op REG3            10 00000000001001 1 LLLLLLLLLL  RRRRR    4
BG       REG2 op REG3               10 00000000001010 0 xxxxx RRRRR RRRRR    3
BG       LITERAL op REG3            10 00000000001010 1 LLLLLLLLLL  RRRRR    4
BUG      REG2 op REG3               10 00000000001011 0 xxxxx RRRRR RRRRR    3
BUG      LITERAL op REG3            10 00000000001011 1 LLLLLLLLLL  RRRRR    4
BGE      REG2 op REG3               10 00000000001100 0 xxxxx RRRRR RRRRR    3
BGE      LITERAL op REG3            10 00000000001100 1 LLLLLLLLLL  RRRRR    4
BUGE     REG2 op REG3               10 00000000001101 0 xxxxx RRRRR RRRRR    3
BUGE     LITERAL op REG3            10 00000000001101 1 LLLLLLLLLL  RRRRR    4
BL       REG2 op REG3               10 00000000001110 0 xxxxx RRRRR RRRRR    3
BL       LITERAL op REG3            10 00000000001110 1 LLLLLLLLLL  RRRRR    4
BUL      REG2 op REG3               10 00000000001111 0 xxxxx RRRRR RRRRR    3
BUL      LITERAL op REG3            10 00000000001111 1 LLLLLLLLLL  RRRRR    4
BLE      REG2 op REG3               10 00000000010000 0 xxxxx RRRRR RRRRR    3
BLE      LITERAL op REG3            10 00000000010000 1 LLLLLLLLLL  RRRRR    4
BULE     REG2 op REG3               10 00000000010001 0 xxxxx RRRRR RRRRR    3
BULE     LITERAL op REG3            10 00000000010001 1 LLLLLLLLLL  RRRRR    4

BBITS    REG2 op REG3               10 00000000010010 0 xxxxx RRRRR RRRRR    3
BBITS    LITERAL op REG3            10 00000000010010 1 LLLLLLLLLL  RRRRR    4
BCLEAR   REG2 op REG3               10 00000000010011 0 xxxxx RRRRR RRRRR    3
BCLEAR   LITERAL op REG3            10 00000000010011 1 LLLLLLLLLL  RRRRR    4


INP     REG2 op REG3                10 00000000011000 0 xxxxx RRRRR RRRRR    3
INP     LITERAL op REG3             10 00000000011000 1 LLLLLLLLLL  RRRRR    4
OUT     REG2 op REG3                10 00000000011001 0 xxxxx RRRRR RRRRR    3
OUT     LITERAL op REG3             10 00000000011001 1 LLLLLLLLLL  RRRRR    4

Note: Absolute JUMPs/CALLs
JMP     REG2 + REG3                 10 00000000100000 0 xxxxx RRRRR RRRRR    3
JMP     LITERAL + REG3              10 00000000100000 1 LLLLLLLLLL  RRRRR    4
CALL    REG2 + REG3                 10 00000000100001 0 xxxxx RRRRR RRRRR    7
CALL    LITERAL + REG3              10 00000000100001 1 LLLLLLLLLL  RRRRR    8


Instructions with 1 parameters :

31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------------------------------------------------------
 0  1 x  x  x  x  x  x  x  x  x  x  x  x  x  x  M  l  l  l  l  l  l  l  l  l  l  r3 r3 r3 r3 r3

M bit marks if l+r3 is a 15 bit literal or r3 is a register. 15 bit Literals 
are defined from 16383 to -16382. -16383 Literal (100 0000 0000 0001) is 
reserved to mark that the next word is a 32 bit Long Literal value. Access to 
the next word for a Long Literals takes a extra clock cycle.
Note: x means "Don't care"

Instruction     Parameters                      Format              Cycle Count
-------------------------------------------------------------------------------
NOT      REG3                       01 00000000000000 0 xxxxx xxxxx RRRRR    3
NEG      REG3                       01 00000000000001 0 xxxxx xxxxx RRRRR    3

XCHG     REG3                       01 00000000000010 0 xxxxx xxxxx RRRRR    3
XCHG.W   REG3                       01 00000000000011 0 xxxxx xxxxx RRRRR    3
SXTBD    REG3                       01 00000000000100 0 xxxxx xxxxx RRRRR    3
SXTBD.W  REG3                       01 00000000000101 0 xxxxx xxxxx RRRRR    3

PUSH     REG3                       01 00000000000110 0 xxxxx xxxxx RRRRR    7
PUSH     LITERAL                    01 00000000000110 1 LLLLLLLLLLLLLLL      8
POP      REG3                       01 00000000000111 0 xxxxx xxxxx RRRRR    7

GETPC    REG3                       01 00000000001000 0 xxxxx xxxxx RRRRR    3

SETFLAGS REG3                       01 00000000001001 0 xxxxx xxxxx RRRRR    3
SETFLAGS LITERAL                    01 00000000001001 1 LLLLLLLLLLLLLLL      4
GETFLAGS REG3                       01 00000000001010 0 xxxxx xxxxx RRRRR    3

SETY     REG3                       01 00000000001011 0 xxxxx xxxxx RRRRR    3
SETY     LITERAL                    01 00000000001011 1 LLLLLLLLLLLLLLL      4
GETY     REG3                       01 00000000001100 0 xxxxx xxxxx RRRRR    3

SETIA    REG3                       01 00000000001101 0 xxxxx xxxxx RRRRR    3
SETIA    LITERAL                    01 00000000001101 1 LLLLLLLLLLLLLLL      4
GETIA    REG3                       01 00000000001110 0 xxxxx xxxxx RRRRR    3

INT      REG3                       01 00000000010000 0 xxxxx xxxxx RRRRR   11
INT      LITERAL                    01 00000000010000 1 LLLLLLLLLLLLLLL     12

Note: Relative JMP/CALL
JMP      REG3                       01 00000000010001 0 xxxxx xxxxx RRRRR   3
JMP      LITERAL                    01 00000000010001 1 LLLLLLLLLLLLLLL     4
CALL     REG3                       01 00000000010010 0 xxxxx xxxxx RRRRR   7
CALL     LITERAL                    01 00000000010010 1 LLLLLLLLLLLLLLL     8


Instructions with 0 parameters :

31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------------------------------------------------------
 0  0 x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x


Instruction     Parameters                      Format              Cycle Count
-------------------------------------------------------------------------------
NOP                                   00 000000000000000000000000000000       1
SLEEP                                 00 000000000000000000000000000001      +1   

RFI                                   00 000000000000000000000000000100      11   
RET                                   00 000000000000000000000000000101       7   


BOVF                                  00 000000000000000000000000001000       3   
BOCF                                  00 000000000000000000000000001001       3   


=== ADDRESS BUS =============================================================

The RC3200  is a 32 bit cpu, so have a 32 bit flat address space. But the actual
chip encapsulation and building process limits to a external 20bit address bus,
so the 12 MSB bits of any address are ignored. This give access to a 1MiB max 
of RAM with the actual version of the chip. Future version of the chip could
havea increase external address size to address more real RAM.

=== DESCRIPTION OF INSTRUCTIONS ===============================================
  
=== RAM INSTRUCTIONS ==========================================================
  
  LOAD   REG1 + REG2, REG3
  LOAD   REG1 + LITERAL, REG3
  LOAD.W REG1 + REG2, REG3
  LOAD.W REG1 + LITERAL, REG3
  LOAD.B REG1 + REG2, REG3
  LOAD.B REG1 + LITERAL, REG3
  
  Load a dword value from RAM at REG1 + REG2 values or REG1 + Literal value, 
  and put it in REG3.
  LOAD.W reads a word value, and LOAD.B loads a byte value. The value is put in
  the LSB of REG3 register.
  
  
  STORE   REG1 + REG2, REG3
  STORE   REG1 + LITERAL, REG3
  STORE.W REG1 + REG2, REG3
  STORE.W REG1 + LITERAL, REG3
  STORE.B REG1 + REG2, REG3
  STORE.B REG1 + LITERAL, REG3
  
  Write REG3 value in RAM at REG1 + REG2 values or REG1 + Literal value.
  STORE.W writes a word value, and STORE.B writes a byte value. The value is 
  get form the LSB of REG3 register.

  
=== ALU INSTRUCTIONS ==========================================================
  
  ADD REG1, REG2, REG3
  ADD REG1, LITERAL, REG3
  
  Do the addition of REG1 + REG2 (or LITERAL) and put it on REG3.
  
  
  ADDC REG1, REG2, REG3
  ADDC REG1, LITERAL, REG3
  
  Do the addition of REG1 + LITERAL (or LITERAL) with Carry Bit and put it on 
  REG3.
  
  
  SUB REG1, REG3, REG2
  SUB REG1, LITERAL, REG3
  
  Do the subtraction of REG1 - REG2 (or LITERAL) and put it on REG3.
  
  
  SUBB REG1, REG2, REG3
  SUBB REG1, LITERAL, REG3

  Do the subtraction of REG1 - REG2 (or LITERAL) with Borrow Bit 
  (Carry flag) and put it on REG3. 
  

  MUL  REG1, REG2, REG3
  MUL  REG1, LITERAL, REG3
  UMUL REG1, REG2, REG3
  UMUL REG1, LITERAL, REG3

  Do the 32x32 bit multiplication of Reg1 x Reg2 (or literal).
  Stores the 32 bit most significant bits in the Y register. The lowest
  significant 32 bit are stored in Reg3. UMUL does the unsigned operation.


  DIV  REG1, REG2, REG3
  DIV  REG1, LITERAL, REG3
  UDIV REG1, REG2, REG3
  UDIV REG1, LITERAL, REG3

  Do the 64/32 bit division of Y:Reg1 / Reg2 (or literal).
  Uses the value of Y register as the 32 MSB of the dividend and Reg1 as LSB. 
  UDIV does the unsigned operation.
  The quotient are stored in Y:Reg3, where the Y register stores the 32 MSB and
  Reg3 stores the 32 LSB.
  If a division error happens and TDE bit is enable, the RC3200  will throw an 
  interrupt with message 0, and will be set Division Error flag to 1.


  MOD  REG1, REG2, REG3
  MOD  REG1, LITERAL, REG3
  UMOD REG1, REG2, REG3
  UMOD REG1, LITERAL, REG3

  Do the 64/32 bit division of Y:Reg1 / Reg2 (or literal).
  Uses the value of Y register as the 32 MSB of the dividend and Reg1 as LSB. 
  UMOD does the unsigned operation.
  The rest is MSB is stored in Y register and the LSB is stored in Reg3.
  If a division error happens and TDE bit is enable, the RC3200  will throw an 
  interrupt with message 0, and will be set Division Error flag to 1.


  NOT REG3

  Apply NOT logic operation over Reg3 value and writes on Reg3


  NEG REG3
  
  Does the two complement of REG3 and put it on REG3. (Converts a positive 
  number to a negative )
  

  AND REG1, REG2, REG3
  AND REG1, LITERAL, REG3
  
  Does the logic AND operation between REG1 and REG2 (or literal) and put it in 
  REG3.
  
  
  OR REG1, REG2, REG3
  OR REG1, LITERAL, REG3
  
  Does the logic OR operation between REG1 and REG2 (or literal) and put it in
  REG3.
  
  
  XOR REG1, REG2
  XOR REG1, LITERAL, REG3
  
  Do the logic XOR operation between REG1 and REG2 (or literal) and put it in
  REG3.
  
  
  NAND REG1, REG2, REG3
  NAND REG1, LITERAL, REG3
  
  Do the logic NAND operation between REG1 and REG2 (or literal) and put it in
  REG3.
  
  
  SLL REG1, REG2, REG3
  SLL REG1, LITERAL, REG3
  
  Do the Logic Left Shift of REG1, displacing the value in REG2 (or Literal) 
  bits and put it in REG3. The output bit are stores in Carry Flag.

  
  SRL REG1, REG2, REG3
  SRL REG1, LITERAL, REG3
  
  Do the Logic Right Shift of REG1, displacing the value in REG2 (or Literal) 
  bits and put it in REG3. The output bit are stores in Carry Flag.

  
  SRA REG1, REG2, REG3
  SRA REG1, LITERAL, REG3
  
  Do the Arithmetic Right Shift of REG1, displacing the value in REG2 (or 
  Literal) bits and put it in REG3. The output bit are stores in Carry Flag.

  
  ROTL REG1, REG2, REG3
  ROTL REG1, LITERAL, REG3
  
  Do the Left Rotation of REG1, rotatin the value in REG2 (or literal) bits and
  put it to REG3. 

  
  ROTR REG1, REG2, REG3
  ROTR REG1, LITERAL, REG3
  
  Do the Right Rotation of REG1, rotatin the value in REG2 (or literal) bits 
  and put it to REG3. 
  
=== BRANCHING OPERATIONS =======================================================

  The conditional opcodes take one cycle longer to perform if the test fails.
  When they skip a conditional instruction, they will skip an additional
  instruction at the cost of one extra cycle. This continues until a non-
  conditional instruction has been skipped. This lets you easily chain
  conditionals. Interrupts are not triggered while the RC3200  is skipping.
  
  
  BEQ REG3, REG2       Branch On Equal
  BEQ REG3, LITERAL    "
  BNEQ REG3, REG2      Branch On NOT Equal
  BNEQ REG3, LITERAL   "

  BG REG3, REG2        Branch if Reg3 > Reg2 (signed ints)
  BG REG3, LITERAL     "
  BGE REG3, REG2       Branch if Reg3 >= Reg2 (signed ints)
  BGE REG3, LITERAL    "
  BUG REG3, REG2       Branch if Reg3 > Reg2 (unsigned ints)
  BUG REG3, LITERAL    "
  BUGE REG3, REG2      Branch if Reg3 >= Reg2 (unsigned ints)
  BUGE REG3, LITERAL   "

  BL REG3, REG2        Branch if Reg3 < Reg2 (signed ints)
  BL REG3, LITERAL     "
  BLE REG3, REG2       Branch if Reg3 <= Reg2 (signed ints)
  BLE REG3, LITERAL    "
  BUL REG3, REG2       Branch if Reg3 < Reg2 (unsigned ints)
  BUL REG3, LITERAL    "
  BULE REG3, REG2      Branch if Reg3 <= Reg2 (unsigned ints)
  BULE REG3, LITERAL   "
  
  BBITS REG3, REG2     Branch if Reg3 & Reg2 != 0 (bitwise AND operation)
  BBITS REG3, LITERAL  "
  BCLEAR REG3, REG2    Branch if Reg3 & Reg2 == 0
  BCLEAR REG3, LITERAL "

  BOVF                 Branch if Overflow FLAG is setted ( == 1 )
  BOCF                 Branch if Carry FLAG is setted ( == 1 )

=== REGISTER OPERATIONS ========================================================

  SWP REG3, REG2       Swaps Reg3 and Reg2 values
  CPY REG3, REG2       Copy the value of Reg2 to Reg3
  SET REG3, LITERAL    Puts a literal value on Reg3
  
  XCHG    REG3         Swaps LSB and MSB bytes of 16 LSB bits of Reg3
  XCHG.W  REG3         Swaps LSB and MSB words of Reg3
  SXTBD   REG3         Extends LSB byte of Reg3 to fill Reg3 and keeps the sign
  SXTBD.W REG3         Extends LSB word of Reg3 to fill Reg3 and keeps the sign

=== JUMP INSTRUCTIONS =========================================================
  Jump Instructions:

  JMP REG2 + REG3      Jumps to REG2 + REG3.    (Absolute)
  JMP REG2 + LITERAL   Jumps to REG2 + literal. (Absolute)
  JMP REG3             Jumps to PC + REG3.      (Relative)
  JMP LITERAL          Jumps to PC + literal.   (Relative)

  CALL REG2 + REG3     Jumps to REG2 + REG3, and Push PC to the stack.
                       (Absolute)
  CALL REG2 + LITERAL  Jumps to REG2 + literal, and Push PC to the stack.
                       (Absolute)
  CALL REG3            Jumps to PC + REG3, and Push PC to the stack.
                       (Relative)
  CALL LITERAL         Jumps to PC + literal, and Push PC to the stack.
                       (Relative)

  RET                  Pops PC and set PC to these value. (Return from CALL)

=== STACK INSTRUCTIONS ========================================================

  PUSH REG3       
  PUSH LITERAL

  Writes a dword value to the stack. As the RC32000 is little endian, It push 
  each byte of dword value to the stack, so the SP register decrements his 
  value by 4.
  
  POP REG3
  
  Reads from the stackat a dword value and stores it in the REG3 register. As 
  the RC32000 is little endian, It pops each byte of dword value from the 
  stack, so the SP register incremented his value by 4.


=== SPECIAL INSTRUCTIONS ======================================================

  NOP                  Not Operation (Do nothing)
  SLEEP                Sleeps the CPU and wakes when an hardware interrupt is 
                       triggered

  GETPC REG3           Puts PC+2 value in Reg3

  SETFLAGS REG3        Sets FLAGS value 
  GETFLAGS REG3        Puts FLAGS value in Reg3

  SETY REG3            Sets Y register value
  SETY LITERAL         "
  GETY REG3            Puts Y register value in REG3 register

 
=== INTERRUPT INSTRUCTIONS ====================================================

  INT REG3
  INT LITERAL      

  Triggers a software interrupt with message of REG3 (or Literal).


  GETIA REG3           Sets REG3 to IA value
  SETIA REG3           Sets IA to REG3 register value
  SETIA LITERAL        "

  RFI                  Return from interrupt. Pops PC and pops r0. 
                       Also cleans INTERRUPT FLAG and IACK signal.

=== HARDWARE INTERFACE INSTRUCTIONS ===========================================

Note: INP and OUT instrucctions accepts IO addresses of 32 bits, but only uses
the LSB byte as IO address.

  INP REG3, REG2       
  INP REG3, LITERAL   
  Reads from REG2 register (or Literal) IO address and writes the value to REG3.

  OUT REG3, REG2
  OUT REG3, LITERAL
  Writes at REG2 register (or Literal) IO address, the value of REG3 register.
  
  

=== INTERRUPTS =================================================================    

The RC3200 uses what is know how interrupt polling handling scheme. There is 
not is a vector table, instead there is only a interrupt vector were the OS 
installs a ISR, that polls FLAGS register and/or reads R1 register to discover 
what kind of interrupt happen and who launch it.

When the RC3200  have IA register set to a value != 0, then the interrupts are
enabled. Interrupts can be generated by software by INT instruction or by 
hardware getting to Low the INT line. An interrupt is processed when the RC3200  
is ready to process a new instruction. When an interrupt is being processed, the
IACQ line goes to high indicating that the RC3200  will ignore the INT line or 
any software interrupt This means that all instructions are atomic.

When a Interrupt happens, the RC3200  push to the stack, the values of R0 and 
PC registers, jumps to IA address, and sets the INTERRUPT FLAG to 1, also sets 
IACK signal to High. If it's a software interrupt, the message is put
on R0 to be processed. If it's a hardware interrupt, sets R0 to value read in 
the data bus. (R0 contains always the message from software or hardware
interrupt)

When the interrupt service routine ends executing a RFI, the RC3200 pops PC and
R0 registers, sets IACK (Interrupt Acknowledge) signal to Low, and the 
INTERRUPT FLAG is set to 0.


=== INTERRUPT LIST =============================================================

The interrupt messages should be defined by hardware devices specs. But there a
few interrupts that could be launched by the RC3200 itself, when meets some
special conditions like Division error, Overflow or if single-step mode is
active.

If a division error happens and TDE bit is enable, the RC3200  will throw an 
interrupt with message 0.
If a overflow error happens and TOE bit is enable, the RC3200  will throw an 
interrupt with message 4.
If single-step mode is active (TSS bit is enable) and INTERRUPT FLAG is not 
enable, the RC3200  will throw an interrupt with message 1, when executes any 
instruction.


=== HARDWARE ===================================================================    

The RC3200  have a separate IO address space of 8 bit that can be accessed using
INP and OUT instructions.


=== EXAMPLE MEMORY MAP =========================================================

The memory map is defined by the OS and computer architecture, but here we give
a example memory map for a 1MiB space address:

[FFFFF]  |---------|
         |         |
         |  STACK  |
         |         |
[F0000]  vvvvvvvvvvv
         |         |
         :         :
         :         :
         :         :
         :Available:
         :         :
         :         :
         |         |
[B1000]  |---------|
         |         |
         |  Video  |
         |   RAM   |
         |         |
[B0000]  |---------|
         |         |
         :         :
         :Available:
         :         :
         |         |
[05000]  |---------|
         |Interrupt|
         | Service |
         | Rutines |
[04000]  |---------|
         |         |
         |   BOOT  |
         |   ROM   |
         |         |
[00000]  |---------|

It uses a 4KiB video ram to represent a text only video mode, and uses a ROM 
that sets the hardware, gives some basic ISR, and launch user code from a 
floppy.



