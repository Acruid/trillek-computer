NOTE: WIP

License : CC BY-SA 3.0 http://creativecommons.org/licenses/by-sa/3.0/

RC1600 (RISC CPU 1600) Specification
Version 0.4h 

=== SUMMARY ====================================================================

 * 16 bit RISC CPU, that can use a 20 bit address space [0:0000] to [F:FFFF]
 * 14 general purpose registers (R0 to R13)
 * Multiplication register Y
 * Base Pointer (BP) and Stack Pointer (SP)
 * Flags Register (FLAGS)
 * Interrupt Address (IA)
 * Segment Registers to access 20 bit Address space (CS, DS, SS and IS)
 * IO address space of 8 bit
 * Big Endian

In this document, anything with writes by x:y is a shorthand to a value of 32 
bits stored in two 16 bit registers, being x the Most Significant Bits and y the
Lowest Significant Bits. Also anything within [brackets] is shorthand for 
"the value of the RAM at the location of the value inside the brackets". 
For example, SP means "stack pointer", but [SS:SP] means the value of the RAM at
the location the stack pointer is pointing at, in the Stack Segment.

Whenever the CPU needs to read a word, it reads [CS:PC], then increases PC by 
two. Shorthand for this is [CS:PC+2]. In some cases, the CPU will modify a 
value before reading it, in this case the shorthand is [xS:++X]. When we say 
that the RC1600  Push a value to the Stack, writes these value at [SS:--SP]. 
When we say that RC1600  Pops a value from the stack, reads a value from 
[SS:SP++].

The RC1600 instruction set is based in 16 bit words, so each time that the PC 
is incremented, is incremented by two. Also is Little Endian, so the MSB of a 
word is stored in the lowest address, and the LSB is stored in the highest 
address.

24 Registers :
  - R0 .. R13 - General Purpose Registers (GPR)
  - R14 - BP - Base Pointer -> Also can is a GPR 
  - R15 - SP - Stack Pointer -> Points to the last value Pushed
  - FLAGS register
  - Y - Multiplication/Division register
  - IA - Interrupt Address
  - PC - Program Counter  
  - CS - Code Segment
  - DS - Data Segment
  - SS - Stack Segment
  - IS - Interrupt Segment

FLAGS register :
  BIT 15-11-> Reserved
  BIT 10   -> ENABLE DIVISRION ERRORS (TDE)
  BIT 9    -> ENABLE OVERFLOW ERRORS  (TOE)
  BIT 8    -> ENABLE SINGLE-STEP MODE (TSS)
  BIT 4-7  -> Reserved
  BIT 3    -> INTERRUPT FLAG: 1 If an interrupt is happening. (IF)
  BIT 2    -> DIVISION ERROR FLAG: 1 If was a division error. (DE)
  BIT 1    -> OVERFLOW FLAG: 1 If an arithmetic operation overflowed. (OF)
  BIT 0    -> CARRY FLAG: 1 If the last ADDx/SUBx carried or borrowed a bit. (CF)

If TOE bit is enabled, the RC1600  will generated an appropriated interrupt if an 
overflow happens. 
If TDE bit is enabled, the RC1600  will generated an appropriated interrupt if an 
division error happens.
If TSS bit is enable, the RC1600  will generate an appropriated interrupt with 
message 1
The Carry flag is gets his value, doing a XOR of the carry bit and the sign bit 
of the result, when an arithmetic operation happens.

=== BOOT/RESET STATUS ==========================================================

All registers are set to 0 when the RC1600 boot-up or does a reset.


=== INSTRUCTIONS ===============================================================

Note: 4 bit Literals are defined from 0 to 30. 31 Literal (1111) is reserved to
      mark that the next word is a 16 bit Literal value. Access to the next word
      for long literals takes a extra clock cycle

Instructions with 3 parameters :

15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------
 1  x  x  x r1 r1 r1 r1 r2 r2 r2 r2 r3 r3 r3 r3

Instruction     Parameters                 Format           Cycle Count
-------------------------------------------------------------------------------
LOAD    [REG1 + LITERAL], REG3        1000 RRRR LLLL RRRR    4
LOAD    [REG1 + REG2], REG3           1001 RRRR RRRR RRRR    4
LOAD.B  [REG1 + LITERAL], REG3        1010 RRRR LLLL RRRR    4
LOAD.B  [REG1 + REG2], REG3           1011 RRRR RRRR RRRR    4
STORE   [REG1 + LITERAL], REG3        1100 RRRR LLLL RRRR    4
STORE   [REG1 + REG2], REG3           1101 RRRR RRRR RRRR    4
STORE.B [REG1 + LITERAL], REG3        1110 RRRR LLLL RRRR    4
STORE.B [REG1 + REG2], REG3           1111 RRRR RRRR RRRR    4

Instructions with 2 parameters :

15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------
 0  1  x  x  x  x  x  x r2 r2 r2 r2 r3 r3 r3 r3

Instruction     Parameters                 Format           Cycle Count
-------------------------------------------------------------------------------

ADD     REG3 op REG2 -> REG3          0100 0000 RRRR RRRR    3
ADD     REG3 op LITERAL -> REG3       0100 0001 LLLL RRRR    3
SUB     REG3 op REG2 -> REG3          0100 0010 RRRR RRRR    3
SUB     REG3 op LITERAL -> REG3       0100 0011 LLLL RRRR    3
ADDC    REG3 op REG2 -> REG3          0100 0100 RRRR RRRR    3
SUBB    REG3 op REG2 -> REG3          0100 0101 RRRR RRRR    3
SUBB    REG3 op LITERAL -> REG3       0100 0110 LLLL RRRR    3

AND     REG3 op REG2 -> REG3          0100 0111 RRRR RRRR    3
OR      REG3 op REG2 -> REG3          0100 1000 RRRR RRRR    3
XOR     REG3 op REG2 -> REG3          0100 1001 RRRR RRRR    3

SLL     REG3 op REG2 -> REG3          0100 1010 RRRR RRRR    3
SLL     REG3 op LITERAL -> REG3       0100 1011 LLLL RRRR    3
SRL     REG3 op REG2 -> REG3          0100 1100 RRRR RRRR    3
SRL     REG3 op LITERAL -> REG3       0100 1101 LLLL RRRR    3
SRA     REG3 op REG2 -> REG3          0100 1110 RRRR RRRR    3
SRA     REG3 op LITERAL -> REG3       0100 1111 LLLL RRRR    3

ROTL    REG3 op REG2 -> REG3          0101 0000 RRRR RRRR    3
ROTL    REG3 op LITERAL -> REG3       0101 0001 LLLL RRRR    3
ROTR    REG3 op REG2 -> REG3          0101 0010 RRRR RRRR    3
ROTR    REG3 op LITERAL -> REG3       0101 0011 LLLL RRRR    3

UMUL     REG3 op REG2-> REG3          0101 0100 RRRR RRRR    80
UMUL     REG3 op LITERAL-> REG3       0101 0101 LLLL RRRR    80
UDIV     REG3 op REG2-> REG3          0101 0110 RRRR RRRR    100
UDIV     REG3 op LITERAL-> REG3       0101 0111 LLLL RRRR    100

UMOD     REG3 op REG2-> REG3          0101 1000 RRRR RRRR    100
UMOD     REG3 op LITERAL-> REG3       0101 1001 LLLL RRRR    100

MUL     REG3 op REG2-> REG3           0101 1010 RRRR RRRR    100
MUL     REG3 op LITERAL-> REG3        0101 1011 LLLL RRRR    100
DIV     REG3 op REG2-> REG3           0101 1100 RRRR RRRR    120
DIV     REG3 op LITERAL-> REG3        0101 1101 LLLL RRRR    120

MOD     REG3 op REG2-> REG3           0101 1110 RRRR RRRR    120
MOD     REG3 op LITERAL-> REG3        0101 1111 LLLL RRRR    120

SWP     REG2, REG3                    0110 0000 RRRR RRRR    3

CPY     REG2 -> REG3                  0110 0001 RRRR RRRR    2
SET     LITERAL -> REG3               0110 0010 LLLL RRRR    2

BEQ     REG2 op REG3                  0110 0011 RRRR RRRR    5
BEQ     LITERAL op REG3               0110 0100 LLLL RRRR    5
BNEQ    REG2 op REG3                  0110 0101 RRRR RRRR    5
BNEQ    LITERAL op REG3               0110 0110 LLLL RRRR    5
BG      REG2 op REG3                  0110 0111 RRRR RRRR    5
BG      LITERAL op REG3               0110 1000 LLLL RRRR    5
BGE     REG2 op REG3                  0110 1001 RRRR RRRR    5
BGE     LITERAL op REG3               0110 1010 LLLL RRRR    5
BUG     REG2 op REG3                  0110 1011 RRRR RRRR    5
BUG     LITERAL op REG3               0110 1100 LLLL RRRR    5
BUGE    REG2 op REG3                  0110 1101 RRRR RRRR    5
BUGE    LITERAL op REG3               0110 1110 LLLL RRRR    5
BBITS   REG2 op REG3                  0110 1111 RRRR RRRR    6
BCLEAR  REG2 op REG3                  0111 0000 RRRR RRRR    6

INP     REG2 op REG3                  0111 0001 RRRR RRRR    3
INP     LITERAL op REG3               0111 0010 LLLL RRRR    3
OUT     REG2 op REG3                  0111 0011 RRRR RRRR    3
OUT     LITERAL op REG3               0111 0100 LLLL RRRR    3


LJMP [REG3:REG2]  (Absolute)          0111 1100 RRRR RRRR    3
LCALL [REG3:REG2] (Absolute)          0111 1101 RRRR RRRR    5

JMP REG3+LITERAL  (Absolute)          0111 1110 LLLL RRRR    3
CALL REG3+LITERAL (Absolute)          0111 1111 LLLL RRRR    4

Instructions with 1 parameter :

15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------
 0  0  1  x  x  x  x  x  x  x  x  x r3 r3 r3 r3

Instruction     Parameters                 Format           Cycle Count
-------------------------------------------------------------------------------

NOT      REG3                         0010 0000 0000 RRRR    3
NEG      REG3                         0010 0000 0001 RRRR    3

XCHG     REG3                         0010 0000 0010 RRRR    3
SXTBD    REG3                         0010 0000 0011 RRRR    3

PUSH     REG3                         0010 0000 0100 RRRR    3
POP      REG3                         0010 0000 0101 RRRR    3

GETPC    REG3                         0010 0000 0110 RRRR    2

SETFLAGS REG3                         0010 0000 0111 RRRR    3
GETFLAGS REG3                         0010 0000 1000 RRRR    2

SETY     REG3                         0010 0000 1001 RRRR    3
SETY     LITERAL                      0010 0000 1010 RRRR    3
GETY     REG3                         0010 0000 1011 RRRR    2

INT     REG3                          0010 0000 1100 RRRR    8
INT     LITERAL                       0010 0000 1101 LLLL    8

SETIA   REG3                          0010 0000 1110 RRRR    3
SETIA   LITERAL                       0010 0000 1111 LLLL    3
GETIA   REG3                          0010 0001 0000 RRRR    2

SETCS   REG3                          0010 0001 0001 RRRR    3
SETCS   LITERAL                       0010 0001 0010 LLLL    3
GETCS   REG3                          0010 0001 0011 RRRR    2

SETDS   REG3                          0010 0001 0100 RRRR    3
SETDS   LITERAL                       0010 0001 0101 LLLL    3
GETDS   REG3                          0010 0001 0110 RRRR    2

SETSS   REG3                          0010 0001 0111 RRRR    3
SETSS   LITERAL                       0010 0001 1000 LLLL    3
GETSS   REG3                          0010 0001 1001 RRRR    2

SETIS   REG3                          0010 0001 1010 RRRR    3
SETIS   LITERAL                       0010 0001 1011 LLLL    3
GETIS   REG3                          0010 0001 1100 RRRR    2

reserved REG3                         0011 xxxx xxxx RRRR


Instructions with 1 parameter and long literal (-256 to 255) :

15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------
 0  0  0  1  x  x  x  L  L  L  L  L  L  L  L  L

Instruction     Parameters                 Format           Cycle Count
-------------------------------------------------------------------------------

JMP (Relative)  to [LITERAL + PC]     0001 000L LLLL LLLL    3
CALL (Relative) to [LITERAL + PC]     0001 001L LLLL LLLL    4


Instructions 0 parameters :

15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
-----------------------------------------------
 0  0  0  0  x  x  x  x  x  x  x  x  x  x  x  x

Instruction     Parameters                 Format           Cycle Count
-------------------------------------------------------------------------------

NOP                                   0000 0000 0000 0000    1
SLEEP                                 0000 0000 0000 0001    At least 1

RET                                   0000 0000 0000 0010    4
LRET                                  0000 0000 0000 0011    5
RFI                                   0000 0000 0000 0100    8

BOVF                                  0000 0000 0000 1000    6
BOCF                                  0000 0000 0000 1001    6

reserved                              0000 1xxx xxxx xxxx


=== ADDRESS MODEL =============================================================

The RC1600  is a 16 bit cpu. In theory, using only a 16 bit register, only can 
address to 64KiB of RAM directly. To address more RAM, the RC1600  uses Segment 
registers to generate a 32 bit address, but actually only the four less 
significant bits of the segment registers are used, creating a effective 20 bit
addresses. Future compatible processors, could use extra bits of segment 
registers to access bigger address spaces.

There is four segment registers:
- CS : Code Segment
- DS : Data Segment
- SS : Stack Segment
- IS : Interrupt Segment

When the RC1600  fetches a instruction, it reads at address [CS:PC], also when 
the PC register overflows (does PC++ and its over 0xFFFF), then the PC register
is set to 0 and CS is incremented by 1. This allow to use code that is bigger 
that 64KiB directly. The only exception to this rule are in relative calls and 
jumps. A relative Jump, can cross a segment if PC+offset > 0xFFFF or 
CS+offset < 0xFFFF, in this case auto-incrementing/decreasing CS. A relative Call
, only can access the same segment that called it, so PC+offset is limited 
always to 0x0000-0xFFFF range. 

When the RC1600  uses a load/store instruction with REG1 being any register from
R0 to R13, it access to the address [DS:xxxx] were xxxx is the 16 bit address 
that takes load/store as argument. If REG1 is SP or BP registers, then access 
to [SP:xxxx].

When the RC1600  uses a stack instruction, it access to [SS:(--SP)] (PUSH) or to 
[SS:(SP++)] (POP).

When the RC1600  gets a interrupt and IA != 0, jumps to the address [IS:IA].


=== DESCRIPTION OF INSTRUCTIONS ===============================================
  
=== RAM INSTRUCTIONS ==========================================================
  
  LOAD [REG1 + REG2], REG3
  LOAD [REG1 + LITERAL], REG3
  
  Load a value from RAM at REG1 + REG2 values or REG1 + Literal value, and put
  it in REG3.
  LOAD.B only reads LSB BYTE from RAM and put it on LSB of REG3
  
  
  STORE [REG1 + REG2], REG3
  STORE [REG1 + LITERAL], REG3
  
  Write REG3 value in RAM at REG1 + REG2 values or REG1 + Literal value.
  STORE.B only writes on LSB BYTE from the LSB of REG3


  If the REG1 register is any register from R0 to R13, the effective address :
    [DS:(REG1 + REG2)&0xFFFF]
    [DS:(REG1 + LITERAL)&0xFFFF]
  If the REG1 register is BP or SP, the effective address is:
    [SS:(REG1 + REG2)&0xFFFF]
    [SS:(REG1 + LITERAL)&0xFFFF]
  
  
=== ALU OPERATIONS =============================================================
  
  ADD REG3, REG2
  ADD REG3, LITERAL
  
  Do the addition of REG3 + REG2 (or LITERAL) and put it on REG3.
  
  
  ADDC REG3, REG2
  
  Do the addition of REG3 + REG2 with Carry Bit and put it on REG3
  
  
  SUB REG3, REG2
  SUB REG3, LITERAL
  
  Do the subtraction of REG3 - REG2 (or LITERAL) and put it on REG3.
  
  
  SUBB REG3, REG2
  SUBB REG3, LITERAL

  Do the subtraction of REG3 - REG2 (or LITERAL) with Borrow Bit 
  (Carry flag) and put it on REG3. 
  

  MUL REG3, REG2
  MUL REG3, LITERAL
  UMUL REG3, REG2
  UMUL REG3, LITERAL

  Do the 16x16 bit multiplication of Reg3 x Reg2 (or literal).
  Stores the 16 bit most significant bits in the Y register. The lowest
  significant 16 bit are stored in Reg3. UMUL does the unsigned operation.


  DIV REG3, REG2
  DIV REG3, LITERAL
  UDIV REG3, REG2
  UDIV REG3, LITERAL

  Do the 32/16 bit division of Y:Reg3 / Reg2 (or literal).
  Uses the value of Y register as the 16 most significant bits of the dividend
  and Reg3 as the 16 lowest significant bits. UDIV does the unsigned operation.
  The quotient are stored in Y:Reg3, where the Y register stores the 16 bit most
  significant bits and the Reg3 stores the 16 bit less significant bits.
  If a division error happens and TDE bit is enable, the RC1600  will throw an 
  interrupt with message 0, and will be set Division Error flag to 1.


  MOD REG3, REG2
  MOD REG3, LITERAL
  UMOD REG3, REG2
  UMOD REG3, LITERAL

  Do the 32/16 bit division of Y:Reg3 / Reg2 (or literal).
  Uses the value of Y register as the 16 most significant bits of the dividend
  and Reg3 as the 16 lowest significant bits. UMOD does the unsigned operation.
  The rest is stored in Reg3.
  If a division error happens and TDE bit is enable, the RC1600  will throw an 
  interrupt with message 0, and will be set Division Error flag to 1.


  NOT REG3

  Apply NOT logic operation over Reg3 value and writes on Reg3


  NEG REG3
  
  Does the two complement of REG3 and put it on REG3. (Converts a positive 
  number to a negative )
  

  AND REG3, REG2
  
  Do the logic AND operation between REG3 and REG2 and put it to REG3.
  
  
  OR REG3, REG2
  
  Do the logic OR operation between REG3 and REG2 and put it to REG3.
  
  
  XOR REG3, REG2
  
  Do the logic XOR operation between REG3 and REG2 and put it to REG3.
  
  
  SLL REG3, REG2
  
  Do the Logic Left Shift of REG3, displacing value of REG2 bits and put it to 
  REG3. The output bit are stores in Carry Flag.

  
  SRL REG3, REG2
  
  Do the Logic Right Shift of REG3, displacing value of REG2 bits and put it to 
  REG3. The output bit are stores in Carry Flag.

  
  SRA REG3, REG2
  
  Do the Arithmetic Right Shift of REG3, displacing value of REG2 bits and put
  it to REG3. The output bit are stores in Carry Flag. 

  
  ROTL REG3, REG2
  
  Do the Left Rotation of REG3, displacing value of REG2 bits and put it to
  REG3. 

  
  ROTL REG3, REG2
  
  Do the Right Rotation of REG3, displacing value of REG2 bits and put it to 
  REG3. 
  
=== BRANCHING OPERATIONS =======================================================

  The conditional opcodes take one cycle longer to perform if the test fails.
  When they skip a conditional instruction, they will skip an additional
  instruction at the cost of one extra cycle. This continues until a non-
  conditional instruction has been skipped. This lets you easily chain
  conditionals. Interrupts are not triggered while the RC1600  is skipping.
  
  
  BEQ REG3, REG2       Branch On Equal
  BEQ REG3, LITERAL    "
  BNEQ REG3, REG2      Branch On NOT Equal
  BNEQ REG3, LITERAL   "
  BG REG3, REG2        Branch if Reg3 > Reg2 (signed ints)
  BG REG3, LITERAL     "
  BGE REG3, REG2       Branch if Reg3 >= Reg2 (signed ints)
  BGE REG3, LITERAL    "
  BUG REG3, REG2       Branch if Reg3 > Reg2 (unsigned ints)
  BUG REG3, LITERAL    "
  BUGE REG3, REG2      Branch if Reg3 >= Reg2 (unsigned ints)
  BUGE REG3, LITERAL   "

  BBITS REG3, REG2     Branch if Reg3 & Reg2 != 0 (bitwise AND operation)
  BCLEAR REG3, REG2    Branch if Reg3 & Reg2 == 0

  BOVF                 Branch if Overflow FLAG is setted ( == 1 )
  BOCF                 Branch if Carry FLAG is setted ( == 1 )

=== REGISTER OPERATIONS ========================================================

  SWP REG3, REG2       Swaps Reg3 and Reg2 values
  CPY REG3, REG2       Copy the value of Reg2 to Reg3
  SET REG3, LITERAL    Puts a literal value on Reg3
  
  XCHG REG3            Swaps LSB and MSB bytes of Reg3
  SXTBD REG3           Extends LSB byte of Reg3 to fill Reg3 and keeps the sign

=== JUMP INSTRUCTIONS =========================================================
  Jump Instructions:

  JMP [REG3 + LITERAL] Jumps to [CS:(Reg3 + literal)]. Absolute Address
  JMP [LITERAL]        Jumps to [CS:PC + 9 bit literal] (-256 to 255). 
                       Relative Address.

  CALL [REG3+ LITERAL] Jumps to [CS:(Reg3 + literal)] and Push PC to the stack. 
                       Absolute Address.
  CALL [LITERAL]       Jumps to [CS:PC + 9 bit literal] (-256 to 255) and Push 
                       PC to the stack. 
                       Relative Address.

  LJMP [REG3:REG2]     Long jump to [REG3:REG2] address, so sets PC to REG2 and
                       CS to REG3
  LCALL [REG3:REG2]    Long jump to [REG3:REG2] address, so sets PC to REG2 and
                       CS to REG3. Before push CS, and push PC to the stack.

  RET                  Pops PC. (Return from CALL)

  LRET                 Pops PC and pops CS (Return from LCALL)

=== STACK INSTRUCTIONS ========================================================

  PUSH REG3            Writes Reg3 MSB at [SS:--SP], and writes LSB at [SS:-SP]
                       In other words, stores always a word and decrements SP 
                       by two.
  POP REG3             Reads at [SS:SP++] and put to LSB of Reg3, then Reads at
                       [SS:SP++] and put to MSB of Reg3. In other words, reads 
                       always a word and increments SP by two.

=== SPECIAL INSTRUCTIONS ======================================================

  NOP                  Not Operation (Do nothing)
  SLEEP                Sleeps the CPU and wakes when an hardware interrupt is 
                       triggered

  GETPC REG3           Puts PC+2 value in Reg3

  SETFLAGS REG3        Sets FLAGS value 
  GETFLAGS REG3        Puts FLAGS value in Reg3

  SETY REG3            Sets Y register value
  SETY LITERAL         "
  GETY REG3            Puts Y register value in Reg3

 
=== INTERRUPT INSTRUCTIONS ====================================================

  INT REG3
  INT LITERAL          
  Triggers a software interrupt with message of REG3 or 4 bit Literal.


  GETIA REG3           Sets REG3 to IA value
  SETIA REG3           Sets IA to REG3 value
  SETIA LITERAL        "

  RFI                  Return from interrupt. Pops PC , pops CS and pops r1. 
                       And cleans INTERRUPT FLAG and IACK signal.

=== HARDWARE INTERFACE INSTRUCTIONS ===========================================
  INP REG3, REG2       Reads Reg2 IO address and write the value to Reg3
  INP REG3, LITERAL    "

  OUT REG3, REG2       Writes Reg2 IO address the value of Reg3
  OUT REG3, LITERAL    "
  
  

=== INTERRUPTS =================================================================    

The RC1600  uses what is know how interrupt polling handling scheme. There not 
is a vector table, instead there is only a interrupt vector were the OS installs
a ISR, that polls FLAGS register and/or reads R1 register to discover what kind
of interrupt happen and who launch it.

When the RC1600  have IA register set to a value != 0, then the interrupts are
enabled. Interrupts can be generated by software by INT instruction or by 
hardware getting to Low the INT line. An interrupt is processed when the RC1600  
is ready to process a new instruction. When an interrupt is being processed, the
IACQ line goes to high indicating that the RC1600  will ignore the INT line or 
any software interrupt This means that all instructions are atomic.

When a Interrupt happens, the RC1600  push to the stack, the values of R1, CS 
and PC registers, jumps to [IS:IA address], and sets the INTERRUPT FLAG to 1, 
also sets IACK signal to High. If it's a software interrupt, the message is put
on R1 to be processed. If it's a hardware interrupt, sets R1 to value read in 
the data bus.

When the interrupt service routine ends, executing a RFI, the RC1600  pops PC, 
CS and R1 registers, sets IACK (Interrupt Acknowledge) signal to Low, and the 
INTERRUPT FLAG is set to 0.


=== INTERRUPT LIST =============================================================

The first 256 (0-255) interrupt messages should be reserved for software 
interrupts, that a OS can define what will do. 
The rest could be used by hardware devices and the devices specs should clarify 
what interrupt message uses, if throws any interrupt.

If a division error happens and TDE bit is enable, the RC1600  will throw an 
interrupt with message 0.
If a overflow error happens and TOE bit is enable, the RC1600  will throw an 
interrupt with message 4.
If single-step mode is active (TSS bit is enable) and INTERRUPT FLAG is not 
enable, the RC1600  will throw an interrupt with message 1, when executes any 
instruction.


=== HARDWARE ===================================================================    

The RC1600  have a separate IO address space of 8 bit that can be accessed using
INP and OUT instructions.


=== EXAMPLE MEMORY MAP =========================================================

The memory map is defined by the OS and computer architecture, but here we give
a example memory map for a 1MiB space address:

[F:FFFF] |---------|
         |  STACK  |
[Fx0000] |---------|
         |         |
         :         :
         :         :
         :         :
         :Available:
         :         :
         :         :
         |         |
[0:6000] |---------|
         |  Video  |
         |   RAM   |
[0:5000] |---------|
         |Interrupt|
         | Service |
         |  Rutine |
[0:4000] |---------|
         |   BOOT  |
         |   ROM   |
[0:0000] |---------|

It uses a 4KiB video ram to represent a text only video mode, and uses a ROM 
that sets the hardware, gives some basic ISR, and launch user code from a 
floppy.


